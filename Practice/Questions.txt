Array-1: Given a list of numbers and a no. k, find if any two numbers from the list add upto k.

LL-1: Linked list insertion, count no. of nodes in list recursively

Array-2: Given an array of integers, return a new array such that each element at index i of the new array is the product of all the      numbers in the original array except the one at i.
        For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].
        Follow-up: what if you can't use division?

RichestBegger-RCB 
        Akash has recenty joined a new company and on his first day at office his colleague Mr. Goyal (who is always ready to mock him :XD) gave him an interesting problem to solve.

        Assume N beggars, numbered from 1 to N are standing outside a temple. It is given that 'k' people visit the temple on that partucular day.

        Every person who comes out of the temple selects some beggars from 'l' to 'r' and gives each beggar from 'l' to 'r' 1$ each.

        The task is to find out the beggar (or beggars) who gets the maximum amount of money at the end of the day.

        Akash does not want to get insulted on the first day, so he has asked you to help him.

        Input
        The first line of input contains an integer N denoting the number of beggars.

        The second line contains an integer 'k' denoting the number of people who visit the temple.

        Each of the next k lines contains two integers 'l' and 'r'.

        Output
        The first line of output contains the maximum amount of money a beggar gets.

        The next line consists the beggars who get the maximum amount of money at the end of the day.

        Constraints
        1<=N<=2*100000

        1<=k<=100000

        1<=l,r<=100000

        Example
        Input:
        6
        3
        1 3
        2 4
        5 6

        Output:
        2
        2 3

3Divisor - Given a positive integer value N. The task is to find how many numbers less than or equal to N have numbers of divisors exactly equal to 3.

        Example 1:

        Input:
        N = 6
        Output: 1
        Explanation: The only number with 
        3 divisor is 4.
        
        Example 2:

        Input:
        N = 10
        Output: 2
        Explanation: 4 and 9 have 3 divisors.

        Your Task:
        You don't need to read input or print anything. Your task is to complete the function exactly3Divisors() that takes N as input parameter and returns count of numbers less than or equal to N with exactly 3 divisors.

        Expected Time Complexity : O(N1/2 * N1/4)
        Expected Auxilliary Space :  O(1)

        Constraints :
        1 <= N <= 109

StockPrices - Best Time to Buy and Sell Stock
        You are given an array prices where prices[i] is the price of a given stock on the ith day.

        You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

        Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

        

        Example 1:

        Input: prices = [7,1,5,3,6,4]
        Output: 5
        Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
        Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
        Example 2:

        Input: prices = [7,6,4,3,1]
        Output: 0
        Explanation: In this case, no transactions are done and the max profit = 0.
        

        Constraints:

        1 <= prices.length <= 105
        0 <= prices[i] <= 104

two-sum - Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
        You may assume that each input would have exactly one solution, and you may not use the same element twice.
        You can return the answer in any order.

        Example 1:

        Input: nums = [2,7,11,15], target = 9
        Output: [0,1]
        Output: Because nums[0] + nums[1] == 9, we return [0, 1].
        Example 2:

        Input: nums = [3,2,4], target = 6
        Output: [1,2]
        Example 3:

        Input: nums = [3,3], target = 6
        Output: [0,1]
        

        Constraints:

        2 <= nums.length <= 104
        -109 <= nums[i] <= 109
        -109 <= target <= 109
        Only one valid answer exists.

Merge-sorted-array:merge two sorted arrays in sorted order

Reverse array in groups: Given an array arr[] of positive integers of size N. Reverse every sub-array group of size K. 

        Example 1:
        Input:
        N = 5, K = 3
        arr[] = {1,2,3,4,5}
        Output: 3 2 1 5 4
        Explanation: First group consists of elements
        1, 2, 3. Second group consists of 4,5.

        Example 2:
        Input:
        N = 4, K = 3
        arr[] = {5,6,8,9}
        Output: 8 6 5 9
        
        Your Task:
        You don't need to read input or print anything. The task is to complete the function reverseInGroups() which takes the array, N and K as input parameters and modifies the array in-place. 

        Expected Time Complexity: O(N)
        Expected Auxiliary Space: O(N)

Majority Element: Given an array nums of size n, return the majority element.

        The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array. 

        Example 1:

        Input: nums = [3,2,3]
        Output: 3
        Example 2:

        Input: nums = [2,2,1,1,1,2,2]
        Output: 2

        Constraints:

        n == nums.length
        1 <= n <= 5 * 104
        -231 <= nums[i] <= 231 - 1
        

        Follow-up: Could you solve the problem in linear time and in O(1) space?

Move zeroes - Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

        Note that you must do this in-place without making a copy of the array.

        Example 1:

        Input: nums = [0,1,0,3,12]
        Output: [1,3,12,0,0]
        Example 2:

        Input: nums = [0]
        Output: [0]

        Constraints:

        1 <= nums.length <= 104
        -231 <= nums[i] <= 231 - 1
        
        Follow up: Could you minimize the total number of operations done?

Stock prices2.cpp- Best Time to Buy and Sell Stock II: You are given an array prices where prices[i] is the price of a given stock on the  ith day.

        Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

        Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

        Example 1:
        Input: prices = [7,1,5,3,6,4]
        Output: 7
        Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
        Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
        Example 2:

        Input: prices = [1,2,3,4,5]
        Output: 4
        Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
        Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

        Example 3:
        Input: prices = [7,6,4,3,1]
        Output: 0
        Explanation: In this case, no transaction is done, i.e., max profit = 0.
        
        Constraints:
        1 <= prices.length <= 3 * 104
        0 <= prices[i] <= 104

Find Pivot Index- Given an array of integers nums, calculate the pivot index of this array.

        The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

        If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

        Return the leftmost pivot index. If no such index exists, return -1.

        

        Example 1:

        Input: nums = [1,7,3,6,5,6]
        Output: 3
        Explanation:
        The pivot index is 3.
        Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
        Right sum = nums[4] + nums[5] = 5 + 6 = 11
        Example 2:

        Input: nums = [1,2,3]
        Output: -1
        Explanation:
        There is no index that satisfies the conditions in the problem statement.
        Example 3:

        Input: nums = [2,1,-1]
        Output: 0
        Explanation:
        The pivot index is 0.
        Left sum = 0 (no elements to the left of index 0)
        Right sum = nums[1] + nums[2] = 1 + -1 = 0
        

        Constraints:

        1 <= nums.length <= 104
        -1000 <= nums[i] <= 1000

